#+title: Emacs configuration
#+author: FÃ©lix Jamet

#+startup: overview
#+property: header-args :results silent

* Core setup
** Melpa

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

** =use-package=

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t  ; Automatically install packages if missing
      use-package-always-defer nil ; Set to t for aggressive lazy-loading (can be overridden per package)
      use-package-verbose nil)     ; Show more info during package loading
(use-package diminish) ; Enables the :diminish option to not show minor modes in the status bar.
#+end_src

** Sudo

Use =M-x sudo-edit= to reopen the current file with sudo.

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Small tweaks

Don't pollute the folders with annoyings =*~= backups.
#+begin_src emacs-lisp
(setq backup-directory-alist
      (list (cons ".*" temporary-file-directory)))
#+end_src

Use org-mode for the scratch buffer:
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "#+property: header-args :results output
# This buffer is for text that is not saved, and for volatile org-mode snippets.
# To create a file, visit it with C-x C-f and enter text in its buffer.
")
#+end_src


* User interface

** Remove fluff

#+begin_src emacs-lisp
;; No annoying startup screen.
(setq inhibit-startup-screen t)

;; No tool bar, menu bar, or scroll bars.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; No distracting blinking cursor.
(blink-cursor-mode 0)
#+end_src

** Fonts

#+begin_src emacs-lisp
;; UTF-8 by default.
(set-charset-priority 'unicode)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Preffered fonts.
(cond
 ((member "Fira Code" (font-family-list))
  (set-face-attribute 'default nil :font "Fira Code" :height 95))
 ((member "JetBrains Mono" (font-family-list))
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 95))
 ((member "Source Code Pro" (font-family-list))
  (set-face-attribute 'default nil :font "Source Code Pro" :height 95))
 (t (message "Preferred fonts not found, using system default.")))
#+end_src

** Other UI customizations

#+begin_src emacs-lisp
;; Better scrolling.
(setq scroll-step 1                ; Scroll 1 line at a time.
      scroll-conservatively 10000) ; Keep cursor on screen.

;; Hide line numbers.
(setq line-number-mode nil)

;; Wrapping.
(global-visual-line-mode t)

;; Highlight matching parentheses.
(show-paren-mode t)

;; More succint Yes/No prompts.
(fset 'yes-or-no-p 'y-or-n-p)

(use-package color-identifiers-mode)
(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+end_src


Tabulation:
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil) ; Reject tabs, embrace glorious spaces.
(setq-default tab-width 4)          ; Forgive the heathens.
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :config (load-theme 'monokai t))
#+end_src

** Shortcuts

One-liners:
#+begin_src emacs-lisp
(global-set-key (kbd "C-x x") 'comment-box)
(global-set-key (kbd "<f3>") 'revert-buffer)
(global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "M-o") 'other-window)
#+end_src

Rename opened file:
#+begin_src emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name))
        (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

(global-set-key (kbd "C-c C-r") 'rename-current-buffer-file)
#+end_src

** Modeline

Doom modeline can display icons, which are provided by =all-the-icons=.
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
;; (all-the-icons-install-fonts) ; Installs the required fonts locally.
#+end_src


#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (doom-modeline-mode 1)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-minor-modes t)
  (setq column-number-mode t))
#+end_src

Icons are disabled when using emacs-deamon.
This forces the icons on when opening a new frame.
From http://sodaware.sdf.org/notes/emacs-daemon-doom-modeline-icons/.

#+begin_src emacs-lisp
(defun enable-doom-modeline-icons (_frame)
  (setq doom-modeline-icon t))

(add-hook 'after-make-frame-functions
          #'enable-doom-modeline-icons)
#+end_src

** =helpful=

#+begin_src emacs-lisp
(use-package helpful)
#+end_src


* Typing

** Yasnippet

Some org-mode snippets are defined in [[file:verbose.org]].

#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode 1)
#+end_src

** Autopair

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

Disable autopairing of angle brackets in org mode.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          #'(lambda ()
              (progn
                (modify-syntax-entry ?< ".")
                (modify-syntax-entry ?> "."))))
#+end_src

** Which key

Lists shortcut completion when a shortcut is started.
Helps a lot with discoverability and is very useful when trying to remember a complex sequence.

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+end_src


* Development

** TODO Treesitter

#+begin_src emacs-lisp
;; (use-package tree-sitter
;;   :config
;;   (global-tree-sitter-mode)
;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** Eglot

#+begin_src emacs-lisp
(global-set-key (kbd "C-S-l r") 'eglot-rename)
#+end_src

** Programming languages

*** Go

#+begin_src emacs-lisp
(use-package go-mode
  :hook (go-mode . eglot-ensure)
  :bind ("C-c C-c" . gofmt))
#+end_src

*** JavaScript

Installing the language server:
#+begin_src bash :eval never
pacman -S typescript-language-server
#+end_src

Enable eglot with =js-mode=.
#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'eglot-ensure)
#+end_src

** Markup languages
*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src


* Completion

#+begin_src emacs-lisp
(setq completion-ignore-case t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t)
#+end_src

** Vertico

Minibuffer completion.
Use =M-RET= to bypass completion when saving/opening files to allow selection of a new file that is a prefix of an old file.

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))
#+end_src

Minibuffer configurations:
#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

Auto complete the longest common prefix when pressing TAB, instead of selecting the current entry.
#+begin_src emacs-lisp
(keymap-set vertico-map "TAB" #'minibuffer-complete)
#+end_src

** Marginalia

Annotations in minibuffer.

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :init (marginalia-mode))
#+end_src

** Consult

Tons of search and navigation commands that can replace the native version.
Only a subset are bound here.

#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'.
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'.
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command.
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer.
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window.
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame.
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab.
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump.
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer.
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop.
	 ("C-s" . consult-line)                    ;; orig. isearch.
         ;; M-g bindings in `goto-map'.
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck.
         ("M-g g" . consult-goto-line)             ;; orig. goto-line.
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line.
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading.
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'.
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd.
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)

         ;; Minibuffer history.
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element.
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element.

  :init
  ;; Use Consult to select xref locations with preview.
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
)
#+end_src

** Orderless

Make completion menu match in a orderless, fuzzy way.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-categories-overrides '(file (styles basic partial-completion))))
#+end_src

** Corfu

In-buffer completion (e.g. variable names).

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)  ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)   ;; Automatically open the autocompletion menu.
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

  :init
  (global-corfu-mode)
  (corfu-history-mode)
  (corfu-popupinfo-mode))

;; A few more useful configurations...
(use-package emacs
  :custom
  ;; (completion-cycle-threshold 3) ;; TAB cycle if there are only few candidates
  (tab-always-indent 'complete) ;; Enable indentation+completion using the TAB key.

  ;; Emacs 30 and newer: Disable Ispell completion function.
  ;; Try `cape-dict' as an alternative.
  (text-mode-ispell-word-completion nil)

  ;; Hide commands in M-x which do not apply to the current mode.  Corfu
  ;; commands are hidden, since they are not used via M-x. This setting is
  ;; useful beyond Corfu.
  (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src


* Flagship packages
** Undo-Tree

Visual undo/redo history and more standard undo/redo bindings.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'undo-tree-redo)
  (global-set-key (kbd "C-M-z") 'redo))
#+end_src

Stop generating =.~undo-tree~= files:
#+begin_src emacs-lisp
(setq undo-tree-auto-save-history nil)
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :defer t ; Will load when a magit command is called.
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch)))
#+end_src

** Treemacs

Provides a side panel that helps navigating through the project.

#+begin_src emacs-lisp
(use-package treemacs
  :bind ("<f4>" . treemacs)
  :custom (treemacs-is-never-other-window t)
  :hook (treemacs-mode . treemacs-project-follow-mode))
#+end_src

** Other

#+begin_src emacs-lisp
(use-package rg)
#+end_src


* Org-Mode

Use unicode bullets for the section levels:
#+begin_src emacs-lisp
(use-package org-bullets)
(setq org-bullets-face-name (quote org-bullet-face))
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-bullets-bullet-list '("â" "â" "â" "â" "â"))
#+end_src

Force the same height for sections:
#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))) )
#+end_src

Make check boxes clickable:
#+begin_src emacs-lisp
(require 'org-mouse)
#+end_src

** Babel

*** Behavior

Disables irritating code block indentation.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

Opens source code window in current window.
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Don't evaluate when exporting:
#+begin_src emacs-lisp
(setq org-export-use-babel nil)
#+end_src

*** Languages

Golang support:
#+begin_src emacs-lisp
(use-package ob-go)
#+end_src

Enable some languages:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)
     (shell . t)
     (ditaa . t)
     (emacs-lisp . t)
     (C . t);; regroups C, C++ and D
     (R . t)
     (gnuplot . t)
     (ocaml . t)
     (perl . t)
     (scheme . nil)
     (java . t)
     (lua . t)
     (js . t)
     ;; (jupyter . t)
     (go . t)))
#+end_src

Automatic evaluation:
#+begin_src emacs-lisp
(setq my/babel-evaluate-without-asking
      '("bash"
        "dot"
        "ditaa"
        "python"
        "sh"
        "shell"
        "emacs-lisp"
        "R"
        "cpp"
        "gnuplot"
        "ocaml"
        "perl"
        "scheme"
        "js"
        "jupyter-julia"
        "lua"
        "go"))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (seq-contains my/babel-evaluate-without-asking
                     lang
                     'string=)))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src


* AI
** LLMs
*** OpenRouter API key

Query the key with =pass= and keep it in memory:
#+begin_src emacs-lisp
(defvar eonwe-api-key nil "The API key for EÃ¶nwÃ«.")

(defun get-eonwe-api-key ()
  (unless eonwe-api-key
    (let ((key (string-trim (shell-command-to-string "pass ai/openrouter/eonwe"))))
      (if (string= key "")
          (error "Failed to retrieve the API key.")
        (setq eonwe-api-key key))))
  eonwe-api-key)
#+end_src

*** Gptel

#+begin_src emacs-lisp
(use-package gptel
  :bind (("C-c C-<return>" . gptel-send)
		 ("C-c C-g" . gptel-abort)
		 ("C-c <return>" . gptel))
  :config (setq gptel-default-mode 'org-mode))
#+end_src

**** Local with ollama

#+begin_src emacs-lisp
(gptel-make-ollama "Ollama"
                 :host "localhost:11434"
                 :stream nil
                 :models '(deepseek-coder-v2:16b))
#+end_src

**** OpenRouter

#+begin_src emacs-lisp
(setq
 gptel-model 'deepseek/deepseek-chat-v3-0324:nitro
 gptel-backend (gptel-make-openai "OpenRouter"
                 :host "openrouter.ai"
                 :endpoint "/api/v1/chat/completions"
                 :stream t
                 :key 'get-eonwe-api-key
                 :models '(anthropic/claude-sonnet-4:nitro ; 15o
                           deepseek/deepseek-r1-0528:nitro ; 2.15o
						   deepseek/deepseek-chat-v3-0324:nitro ; .88o
						   google/gemini-2.5-pro-preview:nitro ; 10o
                           google/gemini-2.5-flash-preview-05-20:nitro ; .6o
                           openai/gpt-4.1-nano:nitro ; .4o
                           openai/gpt-4o-mini:nitro ; .6o
                           openai/gpt-4.1-mini:nitro ; 1.6o
                           openai/o4-mini:nitro ; 4.4o
                           )))
#+end_src

**** Custom prompts

#+begin_src emacs-lisp
(defun __gptel-test-writing ()
  "Custom directive for writing tests."
  (if (not (derived-mode-p 'prog-mode))
      (error "This function only works in programming modes.")
    (or (save-mark-and-excursion
          (run-hook-with-args-until-success
           'gptel-rewrite-directives-hook))
        (let* ((lang (downcase (gptel--strip-mode-suffix major-mode)))
               (article (if (and lang (not (string-empty-p lang))
                                 (memq (aref lang 0) '(?a ?e ?i ?o ?u)))
                            "an" "a")))
          (format (concat "You are %s %s programmer.  "
                          "Follow my instructions and write tests to the %s code I provide.\n"
                          "- Generate ONLY %s code as output, without "
                          "any explanation or markdown code fences.\n"
                          "- Generate code in full, do not abbreviate or omit code.\n"
                          "- Do not ask for further clarification, and make "
                          "any assumptions you need to follow instructions.")
                  article lang lang lang)))))

(setq gptel-directives
      (append gptel-directives
              '((tests . __gptel-test-writing))))
#+end_src

#+begin_src emacs-lisp
(setq gptel-directives
      (append gptel-directives
              '((tests . __gptel-test-writing))))
#+end_src


* Conclusion

#+begin_src emacs-lisp
(message "UtÃºlie'n aurÃ«!")
#+end_src
