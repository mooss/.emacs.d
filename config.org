#+title: Emacs configuration
#+author: Félix Jamet

#+startup: overview
#+property: header-args :results silent

* Core setup
** Melpa

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

** =use-package=

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t  ; Automatically install packages if missing
      use-package-always-defer nil ; Set to t for aggressive lazy-loading (can be overridden per package)
      use-package-verbose nil)     ; Show more info during package loading
(use-package diminish) ; Enables the :diminish option to not show minor modes in the status bar.
#+end_src


* User interface

** Remove fluff

#+begin_src emacs-lisp
;; No annoying startup screen.
(setq inhibit-startup-screen t)

;; No tool bar, menu bar, or scroll bars.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Fonts

#+begin_src emacs-lisp
;; UTF-8 by default.
(set-charset-priority 'unicode)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Preffered fonts.
(cond
 ((member "Fira Code" (font-family-list))
  (set-face-attribute 'default nil :font "Fira Code" :height 120))
 ((member "JetBrains Mono" (font-family-list))
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 120))
 ((member "Source Code Pro" (font-family-list))
  (set-face-attribute 'default nil :font "Source Code Pro" :height 120))
 (t (message "Preferred fonts not found, using system default.")))
#+end_src

** Other UI customizations

#+begin_src emacs-lisp

;; Better scrolling.
(setq scroll-step 1                ; Scroll 1 line at a time.
      scroll-conservatively 10000) ; Keep cursor on screen.

;; Show line numbers.
(global-display-line-numbers-mode t)

;; Wrapping.
(global-visual-line-mode t)

;; Highlight matching parentheses.
(show-paren-mode t)

;; More succint Yes/No prompts.
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :config (load-theme 'monokai t))
#+end_src


* Typing

** Yasnippet

Some org-mode snippets are defined in [[file:verbose.org]].

#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode 1)
#+end_src

** Autopair

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

Disable autopairing of angle brackets in org mode.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          #'(lambda ()
              (progn
                (modify-syntax-entry ?< ".")
                (modify-syntax-entry ?> "."))))
#+end_src


* Navigation

** Treemacs

Provides a side panel that helps navigating through the project.

#+begin_src emacs-lisp
(use-package treemacs
  :bind ("<f4>" . treemacs)
  :custom (treemacs-is-never-other-window t)
  :hook (treemacs-mode . treemacs-project-follow-mode))
#+end_src


* Essential packages
** Undo-Tree

Visual undo/redo history and more standard undo/redo bindings.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'undo-tree-redo))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :defer t ; Will load when a magit command is called.
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch)))
#+end_src


* Org-Mode

Use unicode bullets for the section levels:
#+begin_src emacs-lisp
(use-package org-bullets)
(setq org-bullets-face-name (quote org-bullet-face))
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-bullets-bullet-list '("●" "◉" "⊚" "○" "∘"))
#+end_src

Force the same height for sections:
#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))) )
#+end_src

** Babel

*** Behavior

Disables irritating code block indentation.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

Opens source code window in current window.
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Don't evaluate when exporting:
#+begin_src emacs-lisp
(setq org-export-use-babel nil)
#+end_src

*** Languages

Golang support:
#+begin_src emacs-lisp
(use-package ob-go)
#+end_src

Enable some languages:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)
     (shell . t)
     (ditaa . t)
     (emacs-lisp . t)
     (C . t);; regroups C, C++ and D
     (R . t)
     (gnuplot . t)
     (ocaml . t)
     (perl . t)
     (scheme . nil)
     (java . t)
     (lua . t)
     (js . t)
     ;; (jupyter . t)
     (go . t)))
#+end_src

Automatic evaluation:
#+BEGIN_SRC emacs-lisp
(setq my/babel-evaluate-without-asking
      '("bash"
        "dot"
        "ditaa"
        "python"
        "sh"
        "shell"
        "emacs-lisp"
        "R"
        "cpp"
        "gnuplot"
        "ocaml"
        "perl"
        "scheme"
        "js"
        "jupyter-julia"
        "lua"
        "go"))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (seq-contains my/babel-evaluate-without-asking
                     lang
                     'string=)))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src


* Conclusion

#+begin_src emacs-lisp
(message "Utúlie'n aurë!")
#+end_src
